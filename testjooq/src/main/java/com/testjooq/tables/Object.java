/*
 * This file is generated by jOOQ.
 */
package com.testjooq.tables;


import com.testjooq.Jooqtest;
import com.testjooq.tables.records.ObjectRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Object extends TableImpl<ObjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooqtest.object</code>
     */
    public static final Object OBJECT = new Object();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ObjectRecord> getRecordType() {
        return ObjectRecord.class;
    }

    /**
     * The column <code>jooqtest.object.obj_id</code>.
     */
    public final TableField<ObjectRecord, Integer> OBJ_ID = createField(DSL.name("obj_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>jooqtest.object.details</code>.
     */
    public final TableField<ObjectRecord, String> DETAILS = createField(DSL.name("details"), SQLDataType.VARCHAR(32), this, "");

    private Object(Name alias, Table<ObjectRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Object(Name alias, Table<ObjectRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>jooqtest.object</code> table reference
     */
    public Object(String alias) {
        this(DSL.name(alias), OBJECT);
    }

    /**
     * Create an aliased <code>jooqtest.object</code> table reference
     */
    public Object(Name alias) {
        this(alias, OBJECT);
    }

    /**
     * Create a <code>jooqtest.object</code> table reference
     */
    public Object() {
        this(DSL.name("object"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jooqtest.JOOQTEST;
    }

    @Override
    public Object as(String alias) {
        return new Object(DSL.name(alias), this);
    }

    @Override
    public Object as(Name alias) {
        return new Object(alias, this);
    }

    @Override
    public Object as(Table<?> alias) {
        return new Object(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Object rename(String name) {
        return new Object(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Object rename(Name name) {
        return new Object(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Object rename(Table<?> name) {
        return new Object(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Object where(Condition condition) {
        return new Object(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Object where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Object where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Object where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Object where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Object where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Object where(@Stringly.SQL String condition, java.lang.Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Object where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Object whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Object whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
